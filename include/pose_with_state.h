// Generated by gencpp from file px4_csq/pose_with_state.msg
// DO NOT EDIT!


#ifndef PX4_CSQ_MESSAGE_POSE_WITH_STATE_H
#define PX4_CSQ_MESSAGE_POSE_WITH_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace px4_csq
{
template <class ContainerAllocator>
struct pose_with_state_
{
  typedef pose_with_state_<ContainerAllocator> Type;

  pose_with_state_()
    : inited(false)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , yaw(0.0)  {
    }
  pose_with_state_(const ContainerAllocator& _alloc)
    : inited(false)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , yaw(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _inited_type;
  _inited_type inited;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _yaw_type;
  _yaw_type yaw;





  typedef boost::shared_ptr< ::px4_csq::pose_with_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::px4_csq::pose_with_state_<ContainerAllocator> const> ConstPtr;

}; // struct pose_with_state_

typedef ::px4_csq::pose_with_state_<std::allocator<void> > pose_with_state;

typedef boost::shared_ptr< ::px4_csq::pose_with_state > pose_with_statePtr;
typedef boost::shared_ptr< ::px4_csq::pose_with_state const> pose_with_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::px4_csq::pose_with_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::px4_csq::pose_with_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace px4_csq

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'px4_csq': ['/home/jena/csq_ws/src/px4_csq/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::px4_csq::pose_with_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::px4_csq::pose_with_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px4_csq::pose_with_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::px4_csq::pose_with_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_csq::pose_with_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::px4_csq::pose_with_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::px4_csq::pose_with_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d6308bb94fea2254a425a7685bdb0d7b";
  }

  static const char* value(const ::px4_csq::pose_with_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd6308bb94fea2254ULL;
  static const uint64_t static_value2 = 0xa425a7685bdb0d7bULL;
};

template<class ContainerAllocator>
struct DataType< ::px4_csq::pose_with_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "px4_csq/pose_with_state";
  }

  static const char* value(const ::px4_csq::pose_with_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::px4_csq::pose_with_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool inited \n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 yaw\n\
";
  }

  static const char* value(const ::px4_csq::pose_with_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::px4_csq::pose_with_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.inited);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.yaw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pose_with_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::px4_csq::pose_with_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::px4_csq::pose_with_state_<ContainerAllocator>& v)
  {
    s << indent << "inited: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.inited);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PX4_CSQ_MESSAGE_POSE_WITH_STATE_H
